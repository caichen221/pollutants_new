/*
 * This file is generated by jOOQ.
 */
package com.iscas.biz.jooq.tables;


import com.iscas.biz.jooq.Keys;
import com.iscas.biz.jooq.TestJooq;
import com.iscas.biz.jooq.tables.records.JooqTestTableRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqTestTable extends TableImpl<JooqTestTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>test_jooq.jooq_test_table</code>
     */
    public static final JooqTestTable JOOQ_TEST_TABLE = new JooqTestTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JooqTestTableRecord> getRecordType() {
        return JooqTestTableRecord.class;
    }

    /**
     * The column <code>test_jooq.jooq_test_table.id</code>.
     */
    public final TableField<JooqTestTableRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>test_jooq.jooq_test_table.name</code>.
     */
    public final TableField<JooqTestTableRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    private JooqTestTable(Name alias, Table<JooqTestTableRecord> aliased) {
        this(alias, aliased, null);
    }

    private JooqTestTable(Name alias, Table<JooqTestTableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>test_jooq.jooq_test_table</code> table reference
     */
    public JooqTestTable(String alias) {
        this(DSL.name(alias), JOOQ_TEST_TABLE);
    }

    /**
     * Create an aliased <code>test_jooq.jooq_test_table</code> table reference
     */
    public JooqTestTable(Name alias) {
        this(alias, JOOQ_TEST_TABLE);
    }

    /**
     * Create a <code>test_jooq.jooq_test_table</code> table reference
     */
    public JooqTestTable() {
        this(DSL.name("jooq_test_table"), null);
    }

    public <O extends Record> JooqTestTable(Table<O> child, ForeignKey<O, JooqTestTableRecord> key) {
        super(child, key, JOOQ_TEST_TABLE);
    }

    @Override
    public Schema getSchema() {
        return TestJooq.TEST_JOOQ;
    }

    @Override
    public Identity<JooqTestTableRecord, Integer> getIdentity() {
        return (Identity<JooqTestTableRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<JooqTestTableRecord> getPrimaryKey() {
        return Keys.SYNTHETIC_PK_JOOQ_TEST_TABLE;
    }

    @Override
    public List<UniqueKey<JooqTestTableRecord>> getKeys() {
        return Arrays.<UniqueKey<JooqTestTableRecord>>asList(Keys.KEY_JOOQ_TEST_TABLE_PRIMARY, Keys.SYNTHETIC_PK_JOOQ_TEST_TABLE);
    }

    @Override
    public JooqTestTable as(String alias) {
        return new JooqTestTable(DSL.name(alias), this);
    }

    @Override
    public JooqTestTable as(Name alias) {
        return new JooqTestTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqTestTable rename(String name) {
        return new JooqTestTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqTestTable rename(Name name) {
        return new JooqTestTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
