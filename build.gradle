
buildscript {
    repositories {
//        maven {
//            url "${localMavenUrl}"
//            allowInsecureProtocol = true
//        }
        maven {
            url "${nexusUrl}"
            allowInsecureProtocol = true
        }
        maven {
            url "${aliyunUrl}"
            allowInsecureProtocol = true
        }
        maven {
            url "${aliyunGoogleUrl}"
            allowInsecureProtocol = true
        }
        maven {
            url "${aliyunGradlePluginUrl}"
            allowInsecureProtocol = true
        }
        maven {
            url "${aliyunSpringUrl}"
            allowInsecureProtocol = true
        }
        maven {
            url "${aliyunSpringPluginUrl}"
            allowInsecureProtocol = true
        }
        maven {
            url "${springUrl}"
            allowInsecureProtocol = true
        }
        maven {
            url "${spring2Url}"
            allowInsecureProtocol = true
        }
        maven {
            url "${aliyunGrailsUrl}"
            allowInsecureProtocol = true
        }
        maven {
            url "${gradlePluginUrl}"
            allowInsecureProtocol = true
        }
        mavenCentral()

    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("com.google.protobuf:protobuf-gradle-plugin:${gradleProtobufGenerateVersion}")
        classpath "gradle.plugin.com.github.jengelman.gradle.plugins:shadow:${shadowJarVersion}"
        classpath "com.bmuschko:gradle-docker-plugin:${gradleDockerVersion}"
    }
}

//task wrapper(type: Wrapper) {
//    gradleVersion = '6.7.1'
//}

//allprojects {
//    task cleanBuildDir(type: Delete) {
//        delete "${projectDir}/build"
//        delete "${projectDir}/out"
//    }
//}


subprojects  {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'idea'
    apply plugin: 'io.spring.dependency-management'
//    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'java-library'
    apply plugin: 'com.bmuschko.docker-remote-api'
    apply plugin: 'com.bmuschko.docker-spring-boot-application'
//    apply plugin: 'com.bmuschko.docker-java-application'

//    group = 'cn.ac.iscas.newframe'
    //发布至maven中央仓库必须与gitee的子域名一致，所以暂时智能用这个group
    group = 'io.gitee.quanwenz'
    //版本号定义规则：开发中： <版本号(x.x.x)>-<当天日期>-<当天更新的小序号>
    //发布版本：x.x.x-RELEASE
    version = "${newframeVersion}"
    sourceCompatibility = "${javaVersion}".toFloat()
    targetCompatibility = "${javaVersion}".toFloat()

//    configurations.all {
//        resolutionStrategy {
//            force 'com.google.guava:guava:29.0-android'
//        }
//    }
//    configurations {
//        api.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
//        api.exclude group: 'org.apache.tomcat'
//        api.exclude group: 'org.apache.tomcat.embed'
////        api.exclude group: 'com.zaxxer', module:'HikariCP'
////        api.exclude group: 'ch.qos.logback'
////        api.exclude group: 'org.slf4j', module:'slf4j-api'
//    }

    repositories {
//        maven {
//            url "${localMavenUrl}"
//            allowInsecureProtocol = true
//        }
        maven {
            url "${nexusUrl}"
            allowInsecureProtocol = true
        }
        maven {
            url "${aliyunUrl}"
            allowInsecureProtocol = true
        }
        maven {
            url "${aliyunGoogleUrl}"
            allowInsecureProtocol = true
        }
        maven {
            url "${aliyunSpringUrl}"
            allowInsecureProtocol = true
        }
        maven {
            url "${springUrl}"
            allowInsecureProtocol = true
        }
        maven {
            url "${spring2Url}"
            allowInsecureProtocol = true
        }
        maven {
            url "${spring3Url}"
            allowInsecureProtocol = true
        }
        maven {
            url "${aliyunGrailsUrl}"
            allowInsecureProtocol = true
        }
        maven {
            url "${iceBlueUrl}"
            allowInsecureProtocol = true
        }
        mavenCentral()
    }
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }
    tasks.withType(Javadoc) {
        options.encoding = "UTF-8"
    }
    dependencies {
//        compile 'org.projectlombok:lombok'

        annotationProcessor "org.projectlombok:lombok"
        compileOnly "org.projectlombok:lombok"
        testAnnotationProcessor "org.projectlombok:lombok"
        testCompileOnly "org.projectlombok:lombok"

        //junit
        testImplementation ("junit:junit:${junitVersion}")

        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "${jupiterVersion}"
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: "${jupiterVersion}"
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: "${jupiterVersion}"
        testImplementation group: 'org.junit.vintage', name: 'junit-vintage-engine', version: "${jupiterVersion}"
        testImplementation group: 'org.junit.platform', name: 'junit-platform-launcher', version: "${junitPlatformVersion}"
        testImplementation group: 'org.junit.platform', name: 'junit-platform-runner', version: "${junitPlatformVersion}"
        testImplementation group: 'org.junit.platform', name: 'junit-platform-suite-api', version: "${junitPlatformVersion}"

        // import a BOM. The versions used in this file will override any other version found in the graph
//        implementation enforcedPlatform('org.springframework.boot:spring-boot-dependencies:1.5.8.RELEASE')
    }

    test {
        useJUnitPlatform()
    }

//    dependencyManagement {
//        imports {
//            //依赖管理
//            mavenBom "io.spring.platform:platform-bom:${platformVersion}"
//        }
//    }
    //这里一定得要。在多模块下，不然编译失败，因为不会把依赖模块给打包。
    jar {
        enabled = true
    }
    task sourcesJar(type: Jar) {
        from sourceSets.main.allJava
        archiveClassifier = 'sources'
    }
    task javadocJar(type: Jar) {
        from javadoc
        archiveClassifier = 'javadoc'
    }
    sourceSets.main.resources.srcDirs = ["src/main/java","src/main/resources"]

//    processResources {
//        from('src/main/java') {
//            include '**/*'
//        }
//    }

    //上传至nexus
//    publishing {
//        publications {
//            maven(MavenPublication) {
//                groupId project.group
//                artifactId project.name
//                version project.version
//                //若是war包，就写components.web,若是jar包，就写components.java
//                from components.java
////                artifact shadowJar
//                artifact sourcesJar
//            }
//        }
//        repositories {
//            maven {
//                allowInsecureProtocol = true
//                if (project.version.endsWith('-SNAPSHOT')) {
//                    url = "http://172.16.10.190:8081/repository/maven-snapshots/"
//                } else {
//                    url = "http://172.16.10.190:8081/repository/maven-releases/"
//                }
//
//                credentials {
//                    username 'admin'
//                    password 'admin123'
//                }
//            }
//        }
//    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId project.group
                artifactId project.name
                version project.version
                //若是war包，就写components.web,若是jar包，就写components.java
                from components.java
//                artifact shadowJar
                artifact sourcesJar
                artifact javadocJar
                pom {
                    // 构件名称
                    // 区别于artifactId，可以理解为artifactName
                    name = 'newframe'
//                    packaging = 'jar'
                    // 构件描述
                    description = 'newframe快速开发框架'
                    // 构件主页
                    url = 'https://gitee.com/quanwenz/newframe'
                    // 许可证名称和地址
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    // 开发者信息
                    developers {
                        developer {
                            name = 'iscas'
                            email = 'quanwen@iscas.ac.cn'
                        }
                    }
                    // 版本控制仓库地址
                    scm {
                        url = 'https://gitee.com/quanwenz/newframe'
                        connection = 'scm:git:https://gitee.com/quanwenz/newframe.git'
                        developerConnection = 'scm:git:https://gitee.com/quanwenz/newframe.git'
                    }
                }
            }
        }
        // 定义发布到哪里
        repositories {
            maven {
                name 'newframeRepository'
//                url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    // 这里就是之前在issues.sonatype.org注册的账号
                    username = "${sonatypeUsername}"
                    password = "${sonatypePassword}"
                }
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }


    javadoc {
        // <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        // 防止本地打开中文乱码
//        options.addStringOption("charset", "UTF-8")
        options.encoding = "UTF-8"
        failOnError = false
    }
}


def bootJarModules() {
    subprojects.findAll { (it.name == 'biz')/* || it.name.equals("rule-engine")*/}
}

task bootApp {
    dependsOn /*subprojects.clean,*/ bootJarModules().bootJar
    doLast {
        println "bootApp执行结束"
    }
}

def publishModules() {
    subprojects.findAll {
        it.name == 'templet' || it.name == 'common-tools' ||
                it.name == 'common-web-tools' || it.name == 'common-redis-tools' ||
                it.name == 'common-rpc-tools' || it.name == 'common-k8s-tools' ||
                it.name == 'biz-mp' || it.name == 'biz-base' ||
                it.name == 'common-ssh-tools' || it.name == 'common-harbor-tools'
    }
}
task publishNeedModules {
    dependsOn /*subprojects.clean,*/ publishModules().publish
    doLast {
        println "publishNeedModules执行结束"
    }
}

//将gradle缓存安装到maven仓库
task cacheToLocalMavenRepository(type: Copy) {
    from new File(gradle.gradleUserHomeDir, 'caches/modules-2/files-2.1')
//    into repositories.mavenLocal().url
    into "file:/E:/coding/maven/repo2"
    eachFile {
        List<String> parts = it.path.split('/')
        it.path = (parts[0]+ '/' + parts[1]).replace('.','/') + '/' + parts[2] + '/' + parts[4]
    }
    includeEmptyDirs false
}