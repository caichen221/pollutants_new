
buildscript {
    repositories {
        maven { url "${nexusUrl}" }
        maven {url "${aliyunUrl}"}
        maven { url "${springUrl}" }
        maven { url "${spring2Url}" }
        jcenter()
        mavenCentral()

    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("com.google.protobuf:protobuf-gradle-plugin:${gradleProtobufGenerateVersion}")
//        classpath "se.transmode.gradle:gradle-docker:${gradle_docker_version}"
    }
}

//task wrapper(type: Wrapper) {
//    gradleVersion = '6.7.1'
//}

//allprojects {
//    task cleanBuildDir(type: Delete) {
//        delete "${projectDir}/build"
//        delete "${projectDir}/out"
//    }
//}

subprojects  {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'idea'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    group = 'com.iscas'
    //版本号定义规则：开发中： <版本号(x.x.x)>-<当天日期>-<当天更新的小序号>
    //发布版本：x.x.x-RELEASE
    version = '1.0.3-20210515-1'
    sourceCompatibility = "${javaVersion}".toFloat()
    targetCompatibility = "${javaVersion}".toFloat()

//    configurations {
//        compile.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
//        compile.exclude group: 'org.apache.tomcat'
//        compile.exclude group: 'org.apache.tomcat.embed'
////        compile.exclude group: 'com.zaxxer', module:'HikariCP'
////        compile.exclude group: 'ch.qos.logback'
////        compile.exclude group: 'org.slf4j', module:'slf4j-api'
//    }
//    processResources {
//
//        from('src/main/java') {
//            include '**/*'
//        }
//    }
    repositories {
        maven { url "${nexusUrl}" }
        maven {url "${aliyunUrl}"}
        maven { url "${springUrl}" }
        maven { url "${spring2Url}" }
        maven { url "${spring3Url}" }
        maven { url "${iceBlueUrl}" }
        jcenter()
        mavenCentral()
    }
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }
    dependencies {
//        compile 'org.projectlombok:lombok'

        annotationProcessor "org.projectlombok:lombok"
        compileOnly "org.projectlombok:lombok"
        testAnnotationProcessor "org.projectlombok:lombok"
        testCompileOnly "org.projectlombok:lombok"

        //junit
        testCompile group: 'junit', name: 'junit', version:"${junitVersion}"

        testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "${jupiterVersion}"
        testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: "${jupiterVersion}"
        testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: "${jupiterVersion}"
        testCompile group: 'org.junit.vintage', name: 'junit-vintage-engine', version: "${jupiterVersion}"
        testCompile group: 'org.junit.platform', name: 'junit-platform-launcher', version: "${junitPlatformVersion}"
        testCompile group: 'org.junit.platform', name: 'junit-platform-runner', version: "${junitPlatformVersion}"
        testCompile group: 'org.junit.platform', name: 'junit-platform-suite-api', version: "${junitPlatformVersion}"
    }
//    dependencyManagement {
//        imports {
//            //依赖管理
//            mavenBom "io.spring.platform:platform-bom:${platformVersion}"
//        }
//    }
    //这里一定得要。在多模块下，不然编译失败，因为不会把依赖模块给打包。
    jar {
        enabled = true
    }
    task sourcesJar(type: Jar) {
        from sourceSets.main.allJava
        archiveClassifier = 'sources'
    }

    //上传至nexus
    publishing {
        publications {
            maven(MavenPublication) {
                groupId project.group
                artifactId project.name
                version project.version
                //若是war包，就写components.web,若是jar包，就写components.java
                from components.java
//                artifact shadowJar
                artifact sourcesJar
            }
        }
        repositories {
            maven {

                if (project.version.endsWith('-SNAPSHOT')) {
                    url = "http://172.16.10.190:8081/repository/maven-snapshots/"
                } else {
                    url = "http://172.16.10.190:8081/repository/maven-releases/"
                }

                credentials {
                    username 'admin'
                    password 'admin123'
                }
            }
        }
    }


}


def bootJarModules() {
    subprojects.findAll { (it.name == 'biz')/* || it.name.equals("rule-engine")*/}
}

task bootApp {
    dependsOn /*subprojects.clean,*/ bootJarModules().bootJar
    doLast {
        println "bootApp执行结束"
    }
}

def publishModules() {
    subprojects.findAll {
        it.name == 'templet' || it.name == 'common-tools' ||
                it.name == 'common-web-tools' || it.name == 'common-redis-tools' ||
                it.name == 'common-rpc-tools' || it.name == 'common-k8s-tools' ||
                it.name == 'biz-mp' || it.name == 'biz-base' ||
                it.name == 'common-ssh-tools' || it.name == 'common-harbor-tools'
    }
}
task publishNeedModules {
    dependsOn /*subprojects.clean,*/ publishModules().publish
    doLast {
        println "publishNeedModules执行结束"
    }
}
