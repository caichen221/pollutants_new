/*
 * This file is generated by jOOQ.
 */
package com.iscas.biz.jooq.test.code.tables;


import com.iscas.biz.jooq.test.code.Keys;
import com.iscas.biz.jooq.test.code.TestJooq;
import com.iscas.biz.jooq.test.code.tables.records.SampleRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sample extends TableImpl<SampleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>test_jooq.sample</code>
     */
    public static final Sample SAMPLE = new Sample();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SampleRecord> getRecordType() {
        return SampleRecord.class;
    }

    /**
     * The column <code>test_jooq.sample.id</code>.
     */
    public final TableField<SampleRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>test_jooq.sample.c1</code>.
     */
    public final TableField<SampleRecord, String> C1 = createField(DSL.name("c1"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>test_jooq.sample.c2</code>.
     */
    public final TableField<SampleRecord, Long> C2 = createField(DSL.name("c2"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>test_jooq.sample.c3</code>.
     */
    public final TableField<SampleRecord, Byte> C3 = createField(DSL.name("c3"), SQLDataType.TINYINT, this, "");

    /**
     * The column <code>test_jooq.sample.c4</code>.
     */
    public final TableField<SampleRecord, Boolean> C4 = createField(DSL.name("c4"), SQLDataType.BIT, this, "");

    private Sample(Name alias, Table<SampleRecord> aliased) {
        this(alias, aliased, null);
    }

    private Sample(Name alias, Table<SampleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>test_jooq.sample</code> table reference
     */
    public Sample(String alias) {
        this(DSL.name(alias), SAMPLE);
    }

    /**
     * Create an aliased <code>test_jooq.sample</code> table reference
     */
    public Sample(Name alias) {
        this(alias, SAMPLE);
    }

    /**
     * Create a <code>test_jooq.sample</code> table reference
     */
    public Sample() {
        this(DSL.name("sample"), null);
    }

    public <O extends Record> Sample(Table<O> child, ForeignKey<O, SampleRecord> key) {
        super(child, key, SAMPLE);
    }

    @Override
    public Schema getSchema() {
        return TestJooq.TEST_JOOQ;
    }

    @Override
    public Identity<SampleRecord, Integer> getIdentity() {
        return (Identity<SampleRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SampleRecord> getPrimaryKey() {
        return Keys.SYNTHETIC_PK_SAMPLE;
    }

    @Override
    public List<UniqueKey<SampleRecord>> getKeys() {
        return Arrays.<UniqueKey<SampleRecord>>asList(Keys.KEY_SAMPLE_PRIMARY, Keys.SYNTHETIC_PK_SAMPLE);
    }

    @Override
    public Sample as(String alias) {
        return new Sample(DSL.name(alias), this);
    }

    @Override
    public Sample as(Name alias) {
        return new Sample(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sample rename(String name) {
        return new Sample(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sample rename(Name name) {
        return new Sample(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, Long, Byte, Boolean> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
