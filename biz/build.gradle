apply plugin: 'war'


configurations {
    api.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    api.exclude group: 'org.apache.tomcat'
    api.exclude group: 'org.apache.tomcat.embed'
    api.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
//    api.exclude group: 'ch.qos.logback', module: 'logback-access'
    api.exclude group: 'ch.qos.logback', module: 'logback-classic'
//    api.exclude group: 'ch.qos.logback', module: 'logback-core'
}

bootJar {
    manifest {
        attributes 'Start-Class': 'com.iscas.biz.BizApp'
    }
//    launchScript()
}

bootWar {
    manifest {
        attributes 'Start-Class': 'com.iscas.biz.BizApp'
    }
//    launchScript()
}

bootRun {
    mainClass = 'com.iscas.biz.BizApp'
}

dependencies {
    api project(":biz-base")
//    api project(":common:common-tools")

    api project(":biz-ssh-server")
//    api project(":special:biz-neo4j")


    //SSH客户端
//    api project(":special:common-ssh-tools")

    //引入mybatis,如果引入了这个模块，
    api project(":biz-mp")

    //引入jpa,如果引入了这个模块
//    api project(":biz-jpa")

    api group: 'org.webjars', name: 'jquery', version: "${jqueryVersion}"

//    annotationProcessor 'org.springframework:spring-context-indexer'
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    //devTools 默认不使用
//    developmentOnly("org.springframework.boot:spring-boot-devtools")

}

dockerCreateDockerfile {
    instruction 'RUN ln -snf /usr/share/zoneinfo/$TimeZone /etc/localtime && echo $TimeZone > /etc/timezone'
    environmentVariable 'TimeZone', 'Asia/Shanghai'
    environmentVariable 'myenv', 'this is my test'
}

docker {
    url = "${dockerRemoteAddr}"
    springBootApplication {
        baseImage = "${dockerRegistryUrl}/library/oneclick/openjdk:11-jdk-oracle"
        maintainer = 'newframe'
        ports = [7901]
        images = ["${dockerRegistryUrl}/library/${rootProject.name}/${project.name}:${version}"]
        jvmArgs = ['-Djava.security.egd=file:/dev/./urandom']
        mainClassName = "com.iscas.business.product.ProductApp"
    }
    registryCredentials {
        url = "http://${dockerRegistryUrl}"
        username = "${dockerRegistryUsername}"
        password = "${dockerRegistryPassword}"
    }
}


//使用springboot自带的打docker镜像的方法
//bootBuildImage {
//    imageName = "192.168.100.96:80/library/${project.name}:${project.version}"
//    pullPolicy = "IF_NOT_PRESENT"
//    builder = "paketobuildpacks/builder:base"
//    publish = true
//    docker {
//        host = "tcp://192.168.100.91:2375"
//        tlsVerify = false
////        certPath = "/home/users/.minikube/certs"
//        publishRegistry {
//            username = "admin"
//            password = "Harbor12345"
//            url = "http://192.168.100.96"
//            email = "76775081@qq.com"
//        }
//    }
//
//}
